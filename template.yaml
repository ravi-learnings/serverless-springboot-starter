AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: A sample template for Serverless SpringBoot application with the aws-serverless-java-container library

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
    Description: The environment that the application is deployed to.

Mappings:
  DomainMapping:
    dev:
      DomainName: gateway-dev.ravilearnings.com
      CertificateArn: arn:aws:acm:us-east-1:375560204311:certificate/7ccf7bb1-55ec-4bd4-8c0d-de7c0ff6414f
    prod:
      DomainName: gateway.ravilearnings.com
      CertificateArn: arn:aws:acm:us-east-1:375560204311:certificate/7ccf7bb1-55ec-4bd4-8c0d-de7c0ff6414f

Conditions:
  IsProd: !Equals [!Ref Environment, prod]
  IsDev: !Equals [!Ref Environment, dev]

Resources:
  restApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      Auth:
        Authorizers:
          CustomAuthorizer:
            FunctionArn: !GetAtt authorizerFunction.Arn
            FunctionPayloadType: REQUEST
            Identity:
              Headers:
                - Cookie
      EndpointConfiguration:
        Type: REGIONAL

  basePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !ImportValue domain-stack-CustomDomainName
      RestApiId: !Ref restApi
      Stage: !Ref Environment
      BasePath: app1

  restApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref restApi
      ResourceId: !GetAtt restApi.RootResourceId
      HttpMethod: ANY
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref CustomAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        RequestParameters:
          integration.request.header.X-ID-TOKEN: "context.authorizer.idToken"
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaFunction.Arn}/invocations

  lambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: com.learnings.serverless_springboot.lambda.LambdaHandler::handleRequest
      Runtime: java17
      MemorySize: 512
      Timeout: 30
      Policies: AWSLambdaBasicExecutionRole
      Environment:
          Variables:
            ENVIRONMENT: !Ref Environment
      Events:
        RestApiEvent:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
            RestApiId: !Ref restApi
            Auth:
              Authorizer: CustomAuthorizer
        PublicRestApiEvent:
          Type: Api
          Properties:
            Path: /public/{proxy+}
            Method: ANY
            RestApiId: !Ref restApi

  # CloudWatch Log Group with retention
  lambdaFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${lambdaFunction}
      RetentionInDays: !If [IsProd, 30, 3]

  # Authorizer Lambda Function
  authorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: com.learnings.serverless_springboot.lambda.BaseAPIGatewayAuthorizer::handleRequest
      Runtime: java17
      MemorySize: 512
      Timeout: 30
      Policies: AWSLambdaBasicExecutionRole
      Environment:
          Variables:
            ENVIRONMENT: !Ref Environment

Outputs:
  ApiEndpoint:
    Description: URL for the Spring Boot API
    Value: !Sub https://${restApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/

  LambdaFunction:
    Description: ARN of the Lambda function
    Value: !GetAtt lambdaFunction.Arn
